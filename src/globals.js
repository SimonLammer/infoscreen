var getNextId = (function () {
    var idCounter = 0;
    return function () {
        return ++idCounter;
    };
})();

var infoscreen = {
    name: 'Unnamed Infoscreen',
    container: [
        {
            name: 'Sample container',
            position: {
                x: 4,             //  4 %
                y: 10             // 10 %
            },
            size: {
                width: 11,        // 11 %
                height: 12        // 12 %
            },
            zindex: 4,
            view: {
                type: 'Color',    // ModuleType name
                arguments: {
                    // color: '#900' // could be set to a fixed value here, but in this example, the color should change dynamically, according to the 'Color' variable
                },
                variables: {
                    color: 5      // use the value of the variable with id 5 as input-variable 'color' (defined in the ModuleType)
                }
            }
        },
        {
            name: 'Second sample container',
            position: {
                x: 60,             //  60 %
                y: 40             // 40 %
            },
            size: {
                width: 11,        // 11 %
                height: 12        // 12 %
            },
            zindex: 4,
            view: {
                type: 'Color',    // ModuleType name
                arguments: {
                     color: '#900' // could be set to a fixed value here, but in this example, the color should change dynamically, according to the 'Color' variable
                },
                variables: {
                    //color: 5      // use the value of the variable with id 5 as input-variable 'color' (defined in the ModuleType)
                }
            }
        }
    ],
    processes: [
        /*{
            name: 'Incrementor',
            type: 'Incrementor (Sample Process)',
            arguments: {
                // inputValueA: 'fixed value'
            },
            variables: {
                number: 6         // use value of variable with id 6 as input-variable 'number'
            },
            outputs: {
                result: 7         // save result in variable with id 7
            }
        }*/
    ],
    variables: [
        {
            id: 5,
            name: 'Color',
            initialValue: '#900'
        },{
            id: 6,
            name: 'Number',
            initialValue: 1
        }/*,{
            id: 7,
            name: 'Incremented Number',
            initialValue: 0
        }*/
    ]
};

var infoscreenRuntime = { // generated by updateRuntime()
    views: {
        /* 'Sample container': new Module(
            getModuleTypeByName('Color'),
            {
                ui: [
                    $('.container[container-name="Sample container"])
                ]
            },
            {
                color: infoscreenRuntime.variables[0]
            }
        ) */
    },
    processes: [],
    variables: {
        // 5: new Variable('Color', '#900')
    }
};
updateRuntime();
function updateRuntime() {
    for (var viewName in infoscreenRuntime.views) {
        infoscreenRuntime.views[viewName].args.ui = [];
        infoscreenRuntime.views[viewName].disable();
    }
    infoscreenRuntime.processes.forEach(function (oldProcess) {
        oldProcess.disable();
    });
    infoscreenRuntime.views = {};
    infoscreenRuntime.processes = [];
    infoscreenRuntime.variables = {};
    infoscreen.variables.forEach(function (variable) {
        infoscreenRuntime.variables[variable.id] = new Variable(variable.name, variable.initialValue);
    });
    infoscreen.container.forEach(function (container) {
        var moduleType = getModuleTypeByName(container.view.type);
        if (!moduleType.isView) {
            throw 'ModuleType "' + container.view.type + '" for container "' + container.name + '" is not a view!';
        }
        var args = {};
        for (argument in container.view.arguments) {
            args[argument] = container.view.arguments[argument];
        }
        args.ui = [];
        var vars = {};
        for (variable in container.view.variables) {
            vars[variable] = infoscreenRuntime.variables[container.view.variables[variable]];
        }
        infoscreenRuntime.views[container.name] = new Module(moduleType, args, vars, {});
    });
    infoscreen.processes.forEach(function (process) {
        var moduleType = getModuleTypeByName(process.type);
        if (moduleType.isView) {
            throw 'ModuleType "' + container.view.type + '" for process "' + process.name + '" is not a view!';
        }
        var args = {};
        for (argument in process.arguments) {
            args[argument] = process.arguments[argument];
        }
        var vars = {};
        for (variable in process.variables) {
            vars[variable] = infoscreenRuntime.variables[process.variables[variable]];
        }
        var outputs = {};
        for (output in process.outputs) {
            outputs[output] = infoscreenRuntime.variables[process.outputs[output]];
        }
        infoscreenRuntime.processes.push(new Module(moduleType, args, vars, outputs));
    });
}

var pages = [
    {
        name: 'Home',
        vueConfig: {
            template: `
            <div id="home">
                <h1>Home</h1>
                <ul>
                    <li v-for="page in pages">
                        {{ page.name }}
                    </li>
                </ul>
            </div>`,
            data: function () {
                return {
                    pages: pages
                };
            }
        },
        navbarItems: [
            {
                class: "glyphicon glyphicon-alert",
                text: "View on GitHub",
                click: function () {
                    alert('1');
                }
            }
        ]
    }, {
        name: 'Editor',
        vueConfig: {
            template: `<div id="editor">
                <editor class="maximize" />
            </div>`
        },
        navbarItems: []
    }, {
        name: 'Viewer',
        vueConfig: {
            template: `<div id="viewer">
                <my-viewer class="maximize" />
            </div>`
        },
        navbarItems: []
    }
];

var currentContainer = infoscreen.container[0];


$.widget("custom.selectPopup", {
    options: {
        data: []
    },
    _create: function () {
        var _this = this;

       this.select = $("<select>", { selectedIndex: -1 });
       for(var i in this.options.data){
           $("<option>", { text: this.options.data[i] }).appendTo(this.select);
       }

       this.select.appendTo(this.element).selectmenu({
            select: function (event, ui) {
                _this._trigger("select", event, ui.item.label);
            },
            close: function (event) {
                _this.select.remove();
                _this._trigger("close", event, null);
            }
        }).selectmenu("open");
    },
    _destroy: function(){
        this.select.remove();
    }
});